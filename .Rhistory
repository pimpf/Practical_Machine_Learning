help("read.csv")
?read.table
getwd()
install.packages("swirl")
library("swirl")
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
mysqrt
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
swirl(0)
getwd()
ls()
x <- 9
ls()
list.files()
dir()
?list.files
args(list.dirs())
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create
dir.create(file.path("testdir2/testdir3"), recursive = TRUE)
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?':'
seq(1:2)
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seql(along.with = my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2))
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
library(caret);
library(caret);
library(randomForest);
library(rpart);
library(pls);
library(plyr);
library(knitr);
library(gbm);
library(kknn);
fTrainUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv";
fTestUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv";
fTrainDest <- "./data/pml-training.csv";
if (!file.exists(fTrainDest)){
download.file(fTrainUrl, destfile=fTrainDest, method="curl");
}
fTestDest <- "./data/pml-testing.csv"
if (!file.exists(fTestDest)){
download.file(fTestUrl, destfile=fTestDest, method="curl");
}
## load data
trainData <- read.csv(fTrainDest, na.strings = c("NA", "", "#DIV/0!"));
testData <- read.csv(fTestDest, na.strings = c("NA", "", "#DIV/0!"));
## Do coherent check
all.equal(colnames(testData)[1:length(colnames(testData)) - 1],
colnames(trainData)[1:length(colnames(trainData)) - 1]);
## Remove non-zero variance
colNZV <- nearZeroVar(trainData, saveMetrics = TRUE);
trainData <- trainData[, !colNZV$nzv];
#Variables with more than 50% missing values are removed
removeVars <- function(v){
if(sum(is.na(trainData[, v])) > 0.50 * nrow(trainData) ){
return(TRUE)
}else{
return(FALSE)
}
}
rmVars <- sapply(colnames(trainData), removeVars);
trainData <- trainData[, !rmVars];
## Remove features not related to prediction like id, timestamp and names
trainData <- trainData[, -c(1:6)];
testData <- testData[, -c(1:6)];
set.seed(54321);
tc <- trainControl(method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
allowParallel=TRUE);
rfFit <- train(classe ~ ., data = trainData, method = "rf", trControl = tc);
plsdaFit <- train(classe ~ ., data = trainData, method = "pls", trControl = tc);
gbmFit <- train(classe ~ ., data = trainData, method = "gbm",
verbose = FALSE, trControl = tc);
knnFit <- train(classe ~ ., data = trainData, method = "kknn", trControl = tc);
Methods <- c("Random forest", "PLSDA", "Gradient boosting machine", "k-Nearest Neighbors");
Accuracy <- c(max(rfFit$results$Accuracy),
max(plsdaFit$results$Accuracy),
max(gbmFit$results$Accuracy),
max(knnFit$results$Accuracy));
perf <- cbind(Methods, Accuracy);
perf;
rfPred <- predict(rfFit, testData);
setwd("~/workplace/Practical_Machine_Learning")
library(caret);
library(randomForest);
library(rpart);
library(pls);
library(plyr);
library(knitr);
library(gbm);
library(kknn);
fTrainUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv";
fTestUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv";
fTrainDest <- "./data/pml-training.csv";
if (!file.exists(fTrainDest)){
download.file(fTrainUrl, destfile=fTrainDest, method="curl");
}
fTestDest <- "./data/pml-testing.csv"
if (!file.exists(fTestDest)){
download.file(fTestUrl, destfile=fTestDest, method="curl");
}
## load data
trainData <- read.csv(fTrainDest, na.strings = c("NA", "", "#DIV/0!"));
testData <- read.csv(fTestDest, na.strings = c("NA", "", "#DIV/0!"));
## Do coherent check
all.equal(colnames(testData)[1:length(colnames(testData)) - 1],
colnames(trainData)[1:length(colnames(trainData)) - 1]);
## Remove non-zero variance
colNZV <- nearZeroVar(trainData, saveMetrics = TRUE);
trainData <- trainData[, !colNZV$nzv];
#Variables with more than 50% missing values are removed
removeVars <- function(v){
if(sum(is.na(trainData[, v])) > 0.50 * nrow(trainData) ){
return(TRUE)
}else{
return(FALSE)
}
}
rmVars <- sapply(colnames(trainData), removeVars);
trainData <- trainData[, !rmVars];
## Remove features not related to prediction like id, timestamp and names
trainData <- trainData[, -c(1:6)];
testData <- testData[, -c(1:6)];
set.seed(54321);
tc <- trainControl(method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
allowParallel=TRUE);
rfFit <- train(classe ~ ., data = trainData, method = "rf", trControl = tc);
## Load libraries
library(caret);
library(randomForest);
library(rpart);
library(pls);
library(plyr);
library(knitr);
library(gbm);
library(kknn);
fTrainUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv";
fTestUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv";
fTrainDest <- "./data/pml-training.csv";
if (!file.exists(fTrainDest)){
download.file(fTrainUrl, destfile=fTrainDest, method="curl");
}
fTestDest <- "./data/pml-testing.csv"
if (!file.exists(fTestDest)){
download.file(fTestUrl, destfile=fTestDest, method="curl");
}
trainData <- read.csv(fTrainDest, na.strings = c("NA", "", "#DIV/0!"));
testData <- read.csv(fTestDest, na.strings = c("NA", "", "#DIV/0!"));
## Do coherent check
all.equal(colnames(testData)[1:length(colnames(testData)) - 1],
colnames(trainData)[1:length(colnames(trainData)) - 1]);
## Remove non-zero variance
columns <- nearZeroVar(trainData, saveMetrics = TRUE);
trainData <- trainData[, !columns$nzv];
## Remove variables with more than 50% missing values
removeVars <- function(v){
if(sum(is.na(trainData[, v])) > 0.50 * nrow(trainData) ){
return(TRUE)
}else{
return(FALSE)
}
}
rmVars <- sapply(colnames(trainData), removeVars);
trainData <- trainData[, !rmVars];
trainData <- trainData[, -(1:6)];
testData <- testData[, -(1:6)];
set.seed(54321);
tc <- trainControl(method = "repeatedcv",
repeats = 3,
classProbs = TRUE,
allowParallel=TRUE);
rfModel <- train(classe ~ ., data = trainData, method = "rf", trControl = tc);
